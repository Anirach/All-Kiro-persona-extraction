// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// Core Project Management
// ============================================================================

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sources  Source[]
  personas Persona[]

  @@map("projects")
}

// ============================================================================
// Evidence Sources and Units
// ============================================================================

model Source {
  id          String   @id @default(cuid())
  projectId   String
  url         String
  title       String?
  publishedAt DateTime?
  fetchedAt   DateTime @default(now())
  tier        String   @default("COMMUNITY") // "CANONICAL", "REPUTABLE", "COMMUNITY", "INFORMAL"
  metadata    String   @default("{}") // JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  evidenceUnits EvidenceUnit[]

  // Indexes
  @@index([projectId])
  @@index([tier])
  @@index([publishedAt])
  @@map("sources")
}

model EvidenceUnit {
  id           String   @id @default(cuid())
  sourceId     String
  snippet      String
  startIndex   Int
  endIndex     Int
  qualityScore Float?
  topics       String   @default("[]") // JSON array of strings
  metadata     String   @default("{}") // JSON string
  createdAt    DateTime @default(now())

  // Relations
  source Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([sourceId])
  @@index([qualityScore])
  @@index([sourceId, qualityScore])
  @@map("evidence_units")
}

// ============================================================================
// Personas and Claims
// ============================================================================

model Persona {
  id        String   @id @default(cuid())
  projectId String
  status    String   @default("DRAFT") // "DRAFT", "PENDING_REVIEW", "APPROVED", "REJECTED"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  claims  Claim[]

  // Indexes
  @@index([projectId])
  @@index([status])
  @@map("personas")
}

model Claim {
  id        String   @id @default(cuid())
  personaId String
  type      String   // "BASIC_INFO", "PROFESSIONAL", "EXPERTISE", "PERSONALITY", "ACHIEVEMENTS"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  persona Persona      @relation(fields: [personaId], references: [id], onDelete: Cascade)
  fields  ClaimField[]

  // Indexes
  @@index([personaId])
  @@index([type])
  @@index([personaId, type])
  @@map("claims")
}

model ClaimField {
  id         String   @id @default(cuid())
  claimId    String
  text       String
  confidence Float    @default(0.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  claim     Claim      @relation(fields: [claimId], references: [id], onDelete: Cascade)
  citations Citation[]

  // Indexes
  @@index([claimId])
  @@index([confidence])
  @@map("claim_fields")
}

model Citation {
  id            String   @id @default(cuid())
  claimFieldId  String
  sentenceIndex Int
  evidenceIds   String   // JSON array of evidence unit IDs
  createdAt     DateTime @default(now())

  // Relations
  claimField ClaimField @relation(fields: [claimFieldId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([claimFieldId])
  @@index([claimFieldId, sentenceIndex])
  @@map("citations")
}

// ============================================================================
// Audit and Compliance
// ============================================================================

model AuditLog {
  id        String   @id @default(cuid())
  actor     String   // User ID or system identifier
  action    String   // "CREATE", "UPDATE", "DELETE", "APPROVE", "REJECT"
  entity    String   // Table/model name
  entityId  String   // ID of the affected record
  details   String   @default("{}") // JSON string with change details
  createdAt DateTime @default(now())

  // Indexes
  @@index([actor])
  @@index([entity, entityId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================================================
// Quality and Performance Tracking
// ============================================================================

model QualityMetrics {
  id                String   @id @default(cuid())
  evidenceUnitId    String?  // Optional: metrics for specific evidence
  personaId         String?  // Optional: metrics for specific persona
  authorityScore    Float?
  contentScore      Float?
  recencyScore      Float?
  corroborationScore Float?
  relevanceScore    Float?
  overallScore      Float?
  calculatedAt      DateTime @default(now())

  // Indexes
  @@index([evidenceUnitId])
  @@index([personaId])
  @@index([overallScore])
  @@map("quality_metrics")
}

model ProcessingJob {
  id          String   @id @default(cuid())
  type        String   // "evidence_processing", "persona_extraction", etc.
  status      String   @default("pending") // "pending", "running", "completed", "failed"
  input       String   @default("{}") // JSON string with job parameters
  output      String   @default("{}") // JSON string with job results
  error       String?  // Error message if failed
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())

  // Indexes
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("processing_jobs")
}

// ============================================================================
// User Management (for future implementation)
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}
