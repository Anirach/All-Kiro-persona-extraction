name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '18'
  HUSKY: 0

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint backend
        run: npm run lint --workspace=packages/backend

      - name: Lint frontend
        run: npm run lint --workspace=packages/frontend

      - name: Lint shared
        run: npm run lint --workspace=packages/shared

      - name: Type check all packages
        run: npm run type-check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=file:./test.db" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Run backend tests
        run: npm run test --workspace=packages/backend
        env:
          NODE_ENV: test

      - name: Run frontend tests
        run: npm run test --workspace=packages/frontend
        env:
          NODE_ENV: test

      - name: Run shared tests
        run: npm run test --workspace=packages/shared
        env:
          NODE_ENV: test

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=file:./test.db" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Run coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Check coverage threshold
        run: |
          COVERAGE=$(npm run test:coverage:check 2>&1 | grep "All files" | awk '{print $10}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage $COVERAGE% is below 80% threshold"
            exit 1
          fi
          echo "Coverage $COVERAGE% meets 80% threshold"

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    strategy:
      matrix:
        package: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: cp .env.example .env

      - name: Build ${{ matrix.package }}
        run: npm run build --workspace=packages/${{ matrix.package }}

      - name: Check build artifacts
        run: |
          if [ "${{ matrix.package }}" = "backend" ]; then
            test -d packages/backend/dist
          elif [ "${{ matrix.package }}" = "frontend" ]; then
            test -d packages/frontend/.next
          fi

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=file:./e2e.db" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Build applications
        run: |
          npm run build --workspace=packages/backend
          npm run build --workspace=packages/frontend

      - name: Start applications
        run: |
          npm run start --workspace=packages/backend &
          npm run start --workspace=packages/frontend &
          sleep 30

      - name: Run E2E tests
        run: npm run test:e2e --workspace=packages/frontend

      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-results
          path: packages/frontend/test-results/

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: persona_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/persona_test" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Run database migrations
        run: npm run db:migrate --workspace=packages/backend
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration --workspace=packages/backend
        env:
          NODE_ENV: test

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: |
          npm run build --workspace=packages/backend
          npm run build --workspace=packages/frontend

      - name: Run performance tests
        run: npm run test:performance --workspace=packages/backend

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: packages/backend/performance-results/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/backend/Dockerfile
          push: false
          tags: persona-extraction-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/frontend/Dockerfile
          push: false
          tags: persona-extraction-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e, integration, performance]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e, integration, performance]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add deployment commands here
