name: Security

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    - cron: '15 3 * * 1' # Weekly on Monday at 03:15 UTC
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: read

env:
  NODE_VERSION: '20'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          config-file: ./.github/codeql-config.yml

      - name: Setup Node.js for build
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Auto-build or manual build
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'
          upload: true

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-dependencies-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [ 'packages/backend', 'packages/frontend', 'packages/shared' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: NPM Audit for ${{ matrix.workspace }}
        run: |
          echo "Running npm audit for ${{ matrix.workspace }}"
          npm audit --workspace=${{ matrix.workspace }} --audit-level=moderate
        continue-on-error: true

      - name: NPM Audit Fix (dry-run)
        run: |
          echo "Checking what npm audit fix would do for ${{ matrix.workspace }}:"
          npm audit fix --workspace=${{ matrix.workspace }} --dry-run || echo "Audit fix recommendations available"
        continue-on-error: true

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          echo "Checking licenses for all packages..."
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense' --excludePrivatePackages
        continue-on-error: true

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image for scanning
        uses: docker/build-push-action@v6
        with:
          context: .
          file: packages/backend/Dockerfile
          push: false
          tags: persona-extraction-backend:scan
          load: true

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'persona-extraction-backend:scan'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Upload backend Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'trivy-backend'

  osv-scanner:
    name: OSV Vulnerability Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v1.7.4
        with:
          scan-args: |-
            -r
            --skip-git
            --format sarif
            --output osv-results.sarif
            .
        continue-on-error: true

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: osv-results.sarif
          category: "osv-scanner"
